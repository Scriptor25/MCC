include "std.mcc"

namespace example

define sphere(cx: number, cy: number, cz: number, r: number, block: string, mode: string) {
    const r2 = r * r
    for (let dz = -r, dz <= r, ++dz) {
        const dz2 = dz * dz
        const z = cz + dz

        for (let dy = -r, dy <= r, ++dy) {
            const dy2 = dy * dy
            const y = cy + dy

            for (let dx = -r, dx <= r, ++dx) {
                const dx2 = dx * dx
                const x = cx + dx

                const d2 = dx2 + dy2 + dz2

                if (d2 < r2)
                    std:setblock([x, y, z]:position, block, mode)
            }
        }
    }
}

define get_block_type(index: number): string {
    return switch (index) {
        case 0 -> "white_stained_glass"
        case 1 -> "light_gray_stained_glass"
        case 2 -> "gray_stained_glass"
        case 3 -> "black_stained_glass"
        case 4 -> "brown_stained_glass"
        case 5 -> "red_stained_glass"
        case 6 -> "orange_stained_glass"
        case 7 -> "yellow_stained_glass"
        case 8 -> "lime_stained_glass"
        case 9 -> "green_stained_glass"
        case 10 -> "cyan_stained_glass"
        case 11 -> "light_blue_stained_glass"
        case 12 -> "blue_stained_glass"
        case 13 -> "purple_stained_glass"
        case 14 -> "magenta_stained_glass"
        case 15 -> "pink_stained_glass"
        default -> "glass"
    }
}

define bubbles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, n: number) {
    for (let i = 0, i < n, ++i) {
        const r = std:random(3, 10)
        const cx = std:random(x1, x2)
        const cy = std:random(y1, y2)
        const cz = std:random(z1, z2)
        const bi = std:random(0, 15)

        const block = get_block_type(bi)

        sphere(cx, cy, cz, r, block, "replace")
        sphere(cx, cy, cz, r - 1, "air", "replace")
    }
}

define test() {
    bubbles(-300, -20, -300, 300, 20, 300, 50)
}

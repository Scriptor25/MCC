namespace vec3

type vec3 = [number, number, number]

define add(const &a: vec3, const &b: vec3): vec3 {
    return [
        a[0] + b[0],
        a[1] + b[1],
        a[2] + b[2],
    ]:vec3
}

define adde(&a: vec3, const &b: vec3) {
    a[0] += b[0]
    a[1] += b[1]
    a[2] += b[2]
}

define sub(const &a: vec3, const &b: vec3): vec3 {
    return [
        a[0] - b[0],
        a[1] - b[1],
        a[2] - b[2],
    ]:vec3
}

define sube(&a: vec3, const &b: vec3) {
    a[0] -= b[0]
    a[1] -= b[1]
    a[2] -= b[2]
}

define mul(const &a: vec3, b: number): vec3 {
    return [
        a[0] * b,
        a[1] * b,
        a[2] * b,
    ]:vec3
}

define mule(&a: vec3, b: number) {
    a[0] *= b
    a[1] *= b
    a[2] *= b
}

define div(const &a: vec3, b: number): vec3 {
    return [
        a[0] / b,
        a[1] / b,
        a[2] / b,
    ]:vec3
}

define dive(&a: vec3, b: number) {
    a[0] /= b
    a[1] /= b
    a[2] /= b
}

define dot(const &a: vec3, const &b: vec3): number {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
}

define cross(const &a: vec3, const &b: vec3): vec3 {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0],
    ]:vec3
}

define format(const &v: vec3): (number | string)[] {
    return `[ ${v[0]}, ${v[1]}, ${v[2]} ]`
}

define print(const &v: vec3) {
    !print("@s", format(v))
}

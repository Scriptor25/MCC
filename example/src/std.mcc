namespace std

type position = [number, number, number]

define assert(x: boolean, message: string) throws {
    unless (x)
        throw message
}

define print(targets: string, message: string) {
    ?`$tellraw $(targets) "$(message)"`
}

define random(min: number, max: number): number {
    if (min > max)
        return random(max, min)
    return ?:number`$random value $(min)..$(max)`
}

define floor(x: number): number {
    let result: number

    let& tmp = ref<number>(storage, std:floor, "tmp") = x
    !store(result, "data get storage std:floor tmp 1")
    delete tmp

    return result
}

define setblock_direct(x: number, y: number, z: number, block: string, mode: string) {
    ?`$setblock $(x) $(y) $(z) $(block) $(mode)`
}

define summon_direct(x: number, y: number, z: number, type: string) {
    ?`$summon $(type) $(x) $(y) $(z)`
}

define setblock(pos: position, block: string, mode: string) {
    let x, y, z : number
    {
        const pos = pos
        x = floor(pos[0])
        y = floor(pos[1])
        z = floor(pos[2])
    }
    setblock_direct(x, y, z, block, mode)
}

define summon(pos: position, type: string) {
    let x, y, z : number
    {
        const pos = pos
        x = floor(pos[0])
        y = floor(pos[1])
        z = floor(pos[2])
    }
    summon_direct(x, y, z, type)
}

define give(target: string, type: string, amount: number) {
    ?`$give $(target) $(type) $(amount)`
}
